<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-4.0.xsd ">
	<context:component-scan base-package="com.letv.whatslive" />
    <bean id="cofigBean"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:*.properties</value>
            </list>
        </property>
    </bean>

    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="usePool" value="true"/>
        <property name="hostName" value="${redis.host}" />
        <property name="port" value="${redis.port}" />
        <property name="timeout" value="200" />
        <constructor-arg index="0" ref="jedisPoolConfig" />
    </bean>

    <!-- jedis客户端读写分离，分别对应2个不同的jedis对象 -->
    <bean id="jedisDAO" class="com.letv.whatslive.redis.JedisDAO">
        <constructor-arg index="0" ref="jedisWriteTemplate"/>
        <constructor-arg index="1" ref="jedisReadTemplate"/>
    </bean>

    <!-- redis单节点下的jedis写操作bean -->
    <bean id="jedisWriteTemplate" class="com.letv.whatslive.redis.template.JedisTemplate" lazy-init="true">
        <constructor-arg index="0" ref="jdeisWritePool"/>
    </bean>

    <!-- redis单节点下的jedis读操作bean -->
    <bean id="jedisReadTemplate" class="com.letv.whatslive.redis.template.JedisTemplate" lazy-init="true">
        <constructor-arg index="0" ref="jdeisReadPool"/>
    </bean>

    <!-- jedis写连接池bean -->
    <bean id="jdeisWritePool" class="com.letv.whatslive.redis.factory.JedisPoolFactory" factory-method="getJedisPool" lazy-init="true">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1" value="${redis.write.host}" />
        <constructor-arg index="2" value="${redis.write.port}" />
        <constructor-arg index="3" value="${redis.timeout}" />
        <constructor-arg index="4" value="${redis.write.passwd}" />
    </bean>

    <!-- jedis读连接池bean -->
    <bean id="jdeisReadPool" class="com.letv.whatslive.redis.factory.JedisPoolFactory" factory-method="getJedisPool" lazy-init="true">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1" value="${redis.read.host}" />
        <constructor-arg index="2" value="${redis.read.port}" />
        <constructor-arg index="3" value="${redis.timeout}" />
        <constructor-arg index="4" value="${redis.write.passwd}" />
    </bean>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="100" />
        <property name="maxIdle" value="10" />
        <property name="timeBetweenEvictionRunsMillis" value="3000" />
        <property name="minEvictableIdleTimeMillis" value="3000" />
        <property name="testOnBorrow" value="false" />
    </bean>

    <!-- redis 订阅-->

    <!--<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">-->
        <!--<property name="connectionFactory" ref="jedisConnectionFactory"/>-->
    <!--</bean>-->

    <!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"-->
          <!--p:connectionFactory-ref="jedisConnectionFactory">-->
        <!--<property name="keySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="valueSerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="hashKeySerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
        <!--</property>-->
        <!--<property name="hashValueSerializer">-->
            <!--<bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>-->
        <!--</property>-->
    <!--</bean>-->

    <!-- redis 订阅-->
    <!--<bean id="shareMessageListener" class="com.letv.whatslive.server.controller.ShareMessageListener"/>-->

    <!--<bean id="topicContainer" class="org.springframework.data.redis.listener.RedisMessageListenerContainer" destroy-method="destroy">-->
        <!--<property name="connectionFactory" ref="jedisConnectionFactory"/>-->

        <!--<property name="taskExecutor">-->
            <!--<bean class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">-->
                <!--<property name="poolSize" value="4"></property>-->
            <!--</bean>-->
        <!--</property>-->
        <!--<property name="messageListeners">-->
            <!--<map>-->
                <!--<entry key-ref="shareMessageListener">-->
                    <!--<bean class="org.springframework.data.redis.listener.ChannelTopic">-->
                        <!--<constructor-arg value="share"/>-->
                    <!--</bean>-->
                <!--</entry>-->
            <!--</map>-->
        <!--</property>-->
    <!--</bean>-->

    <bean id="jedisQueueListener" class="com.letv.whatslive.server.mq.QueueListener"/>
    <bean id="redisQueue" class="com.letv.whatslive.server.mq.RedisQueue" destroy-method="destroy">
        <property name="key" value="share:queue"></property>
        <property name="listener" ref="jedisQueueListener"></property>
    </bean>
</beans>
